name: "Terraform test run"

on:
  push:
    branches:
      - deploy-ideathon
  pull_request:
  workflow_dispatch:

jobs:
  terraform_test:
    name: "Terraform test"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform_test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Pull latest code
        run: |
          git config --global user.email @${{ github.actor }}
          git config --global user.name @${{ github.actor }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > backend.tf << EOF
          terraform { 
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_XC }}"
              }
            }
          }
          EOF
          echo "${{secrets.P12}}" | base64 -d > api.p12

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: get_data
        if: github.ref == 'refs/heads/deploy-ideathon' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          terraform apply -auto-approve -input=false
          echo pub_ip=$(terraform-bin output -json ec2_public_ip) >> $GITHUB_OUTPUT

    outputs:
      aws_pub_ip: ${{steps.get_data.outputs.pub_ip}}

  IP_validation:
    needs: [terraform_test]
    runs-on: ubuntu-latest
    steps:
    # Installing python for Validation 
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      
    # Install the necessary Packages
    - name: Install the necessary packages
      run: |
        python -m pip install requests
        python -m pip install tqdm
        python -m pip install art
        
        
    - name: Python Security Events get
      id: processing_ip
      run: |
        cd python_data
        export INPUT_STORE=$(python ip_process.py ${{needs.terraform_test.outputs.aws_pub_ip}})
        #echo "Access direct: "
        #echo $INPUT_STORE >> $GITHUB_OUTPUT
    
    - name: Validate Deployment  
      run: |
        if [ ${{ env.EXIT }} == "true" ]; then echo "application deployment unsuccessful or application not reachable"; exit 1;\
        else echo "deployment is successfull"; fi
    
    #outputs:
    #  processed_ip: ${{steps.processing_ip.outputs.INPUT_STORE}}

  cloud_push:
    name: "cloud Push"
    needs: [terraform_test, IP_validation]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform_cloud
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Pull latest code
        run: |
          git config --global user.email @${{ github.actor }}
          git config --global user.name @${{ github.actor }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > backend.tf << EOF
          terraform { 
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_XC }}"
              }
            }
          }
          EOF
          echo "${{secrets.P12}}" | base64 -d > api.p12

      - name: Setup Terraform variables
        id: vars
        run: |-
          ip_address = ${{needs.terraform_test.outputs.aws_pub_ip}}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/deploy-ideathon' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          terraform apply -auto-approve -input=false -var="image_id=hello"
  

